(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{519:function(r,t,a){"use strict";a.r(t);var e=a(6),v=Object(e.a)({},(function(){var r=this,t=r.$createElement,a=r._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[a("p",[a("br"),a("img",{attrs:{src:"https://markdown-typora.oss-cn-shenzhen.aliyuncs.com/20210428125241.jpeg#id=EG4rV&originHeight=420&originWidth=746&originalType=binary&status=done&style=none",alt:""}}),a("br"),r._v(" "),a("br"),r._v("最近在刷 LeetCode 题目， 经常要用到数组的拷贝，做一个小小的总结--关于 JavaScript 数组的拷贝"),a("br")]),r._v(" "),a("p",[a("a",{attrs:{name:"88a1a4d3"}})]),r._v(" "),a("h3",{attrs:{id:"浅拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浅拷贝"}},[r._v("#")]),r._v(" 浅拷贝")]),r._v(" "),a("p",[a("br"),r._v("浅拷贝，拷贝了这个对象的引用，我们称之为浅拷贝。，所以拷贝对象改变，会改变原来的数组；"),a("br")]),r._v(" "),a("ul",[a("li",[r._v("直接赋值")])]),r._v(" "),a("blockquote",[a("p",[r._v("let arr1 = [1, 3, 4, 5]")])]),r._v(" "),a("p",[r._v("let arr2 = arr1")]),r._v(" "),a("p",[a("a",{attrs:{name:"510a44e6"}})]),r._v(" "),a("h3",{attrs:{id:"深拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝"}},[r._v("#")]),r._v(" 深拷贝")]),r._v(" "),a("p",[a("br"),r._v("深拷贝是拷贝多层，每一级别的数据都会拷贝出来，拷贝对象改变，不会改变原来的数组。"),a("br")]),r._v(" "),a("ul",[a("li",[r._v("slice()")])]),r._v(" "),a("blockquote",[a("p",[r._v("arrayObj.slice(start, [end]), array对象的slice函数，返回一个数组的一段。")])]),r._v(" "),a("p",[r._v("let arr1 = [1, 3, 4, 5]")]),r._v(" "),a("p",[r._v("let arr2 = arr1.slice()")]),r._v(" "),a("p",[r._v("let arr2[0] = 10 //arr2 = [10, 3, 4, 5]")]),r._v(" "),a("p",[r._v("arr1 = [1, 3, 4, 5]")]),r._v(" "),a("ul",[a("li",[r._v("concat()")])]),r._v(" "),a("blockquote",[a("p",[r._v("arrayObject.concat(arrayX,arrayX,......,arrayX), 用于连接两个或多个数组。该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。")])]),r._v(" "),a("p",[r._v("let arr1 = [1, 3, 4, 5]")]),r._v(" "),a("p",[r._v("let arr2 = arr1.concat()")]),r._v(" "),a("p",[r._v("let arr2[0] = 10 //arr2 = [10, 3, 4, 5]")]),r._v(" "),a("p",[r._v("arr1 = [1, 3, 4, 5]")]),r._v(" "),a("ul",[a("li",[r._v("JSON.stringify() 和 JSON.parse")])]),r._v(" "),a("blockquote",[a("p",[r._v("JSON.stringify把对象转成字符串，再用JSON.parse把字符串转成新的对象")])]),r._v(" "),a("p",[r._v("let arr1 = [1, 3, 4, 5]")]),r._v(" "),a("p",[r._v("let arr2 = JSON.parse(JSON.stringfy(arr1))")]),r._v(" "),a("ul",[a("li",[r._v("Array.from()")])]),r._v(" "),a("blockquote",[a("p",[r._v("Array.from(object, mapFunction, thisValue), from() 方法用于通过拥有 length 属性的对象或可迭代的对象来返回一个数组。")])]),r._v(" "),a("p",[r._v("同时这个用来拷贝多维数组的好方法")]),r._v(" "),a("p",[r._v("let arr1 = [[1, 3],[4, 5]]")]),r._v(" "),a("p",[r._v("let arr2 = Array.from({ length: arr1.length }, () => [])")]),r._v(" "),a("ul",[a("li",[r._v("遍历赋值")])]),r._v(" "),a("blockquote",[a("p",[r._v("let arr1 = [1, 3, 4, 5], arr2 = []")])]),r._v(" "),a("p",[r._v("for (let item in arr1) {arr2[item] = arr1}")]),r._v(" "),a("ul",[a("li",[r._v("JQuery 的 extend 方法")])]),r._v(" "),a("blockquote",[a("p",[r._v("$.extend( [deep ], target, object1 [, objectN ] )")])]),r._v(" "),a("p",[r._v("deep表示是否深拷贝，为true为深拷贝，为false，则为浅拷贝")]),r._v(" "),a("p",[r._v("target Object类型 目标对象，其他对象的成员属性将被附加到该对象上。")]),r._v(" "),a("p",[r._v("object1  objectN可选。 Object类型 第一个以及第N个被合并的对象。")]),r._v(" "),a("p",[r._v("let arr1 = [1, 3, 4, 5]")]),r._v(" "),a("p",[r._v("let arr2 = $.extend(true, [], arr1)")]),r._v(" "),a("p",[a("a",{attrs:{name:"96a7d0e7"}})]),r._v(" "),a("h3",{attrs:{id:"多维数组拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多维数组拷贝"}},[r._v("#")]),r._v(" 多维数组拷贝")]),r._v(" "),a("ul",[a("li",[r._v("JQuery 的 extend 方法")]),r._v(" "),a("li",[r._v("遍历赋值")]),r._v(" "),a("li",[r._v("Array.from()")])])])}),[],!1,null,null,null);t.default=v.exports}}]);